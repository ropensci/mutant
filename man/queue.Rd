% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/queue.R
\name{queue}
\alias{queue}
\title{mutant queue}
\arguments{
\item{x}{self}

\item{...}{ignored}

\item{temporary}{(logical) create a temporary queue that is cleaned up
at the end of your R session? default: \code{TRUE}. if \code{FALSE}, we use
\code{\link[rappdirs:user_data_dir]{rappdirs::user_data_dir()}} to cache the file. use \verb{$queue_path()}
to get the path for the queue}

\item{title}{(character) job title, a random string}

\item{message}{(character) message object, of class \code{liteq_message}}
}
\value{
A new \code{queue} object
}
\description{
print method for \code{queue} objects

Create a new queue object

publish a job into the queue

consume a job from the queue

tell the queue the job can be removed from the queue

list jobs in the queue

fetch the queue path. \code{NULL} if there's no queue
}
\examples{
\dontrun{
x <- queue$new()
x
x$q
x$queue_path()
x$messages()
z <- list(
  path = tempfile(), 
  mutant_location = list(
    `some-file.R` = 
      list(line1 = 45, line2 = 46, column = 4, from = "==", to = ">")))
x$publish(as.character(jsonlite::toJSON(z)))
x$messages()
mssg <- x$consume()
mssg
mssg$title
mssg$message
jsonlite::fromJSON(mssg$message)
x$messages()
x$done(mssg)
x$messages()
}
}
